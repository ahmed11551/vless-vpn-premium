import { Telegraf, Markup, session } from 'telegraf';
import dotenv from 'dotenv';
import cron from 'node-cron';
import { v4 as uuidv4 } from 'uuid';
import crypto from 'crypto';
import moment from 'moment';
import axios from 'axios';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3001/api';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_CONFIG = {
  name: 'VLESS VPN Premium',
  version: '1.0.0',
  supportChat: '@vless_support',
  website: 'https://vless-vpn-premium.netlify.app',
  adminId: process.env.ADMIN_ID || '',
};

// –¢–∞—Ä–∏—Ñ—ã
const PLANS = {
  basic: {
    name: '–ë–∞–∑–æ–≤—ã–π',
    price: 299,
    duration: 30,
    features: ['–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫', '–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'],
    description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'
  },
  premium: {
    name: '–ü—Ä–µ–º–∏—É–º',
    price: 599,
    duration: 30,
    features: ['–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã'],
    description: '–î–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
  },
  pro: {
    name: '–ü—Ä–æ—Ñ–∏',
    price: 999,
    duration: 30,
    features: ['–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', 'VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'],
    description: '–î–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤'
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
const api = {
  async createUser(telegramId, username, firstName, lastName) {
    try {
      const response = await axios.post(`${API_BASE_URL}/users`, {
        telegramId,
        username,
        firstName,
        lastName,
        source: 'telegram'
      });
      return response.data;
    } catch (error) {
      console.error('Error creating user:', error);
      return null;
    }
  },

  async getUser(telegramId) {
    try {
      const response = await axios.get(`${API_BASE_URL}/users/telegram/${telegramId}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user:', error);
      return null;
    }
  },

  async createVpnKey(userId, plan) {
    try {
      const response = await axios.post(`${API_BASE_URL}/vpn/keys`, {
        userId,
        plan,
        source: 'telegram'
      });
      return response.data;
    } catch (error) {
      console.error('Error creating VPN key:', error);
      return null;
    }
  },

  async getUserKeys(userId) {
    try {
      const response = await axios.get(`${API_BASE_URL}/vpn/keys/user/${userId}`);
      return response.data;
    } catch (error) {
      console.error('Error getting user keys:', error);
      return [];
    }
  },

  async createPayment(userId, plan, amount) {
    try {
      const response = await axios.post(`${API_BASE_URL}/payments`, {
        userId,
        plan,
        amount,
        source: 'telegram'
      });
      return response.data;
    } catch (error) {
      console.error('Error creating payment:', error);
      return null;
    }
  }
};

// –£—Ç–∏–ª–∏—Ç—ã
const utils = {
  generateVpnKey() {
    return uuidv4().replace(/-/g, '');
  },

  formatDate(date) {
    return moment(date).format('DD.MM.YYYY HH:mm');
  },

  formatPrice(price) {
    return `${price} ‚ÇΩ`;
  },

  getPlanEmoji(plan) {
    const emojis = {
      basic: 'üü¢',
      premium: 'üü°',
      pro: 'üî¥'
    };
    return emojis[plan] || '‚ö™';
  }
};

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = ctx.from;
  const chatId = ctx.chat.id;
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let dbUser = await api.getUser(user.id);
  if (!dbUser) {
    dbUser = await api.createUser(user.id, user.username, user.first_name, user.last_name);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  userStates.set(chatId, { userId: dbUser?.id, step: 'main' });

  const welcomeText = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${BOT_CONFIG.name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîê –ü–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á–∏
‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ üÜò –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üõí –¢–∞—Ä–∏—Ñ—ã', 'plans')],
    [Markup.button.callback('üîë –ú–æ–∏ –∫–ª—é—á–∏', 'my_keys'), Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∞', 'payment'), Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
    [Markup.button.callback('‚ÑπÔ∏è –û –±–æ—Ç–µ', 'about')]
  ]);

  await ctx.reply(welcomeText, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action('plans', async (ctx) => {
  let plansText = 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n';
  
  Object.entries(PLANS).forEach(([key, plan]) => {
    plansText += `${utils.getPlanEmoji(key)} *${plan.name}*\n`;
    plansText += `üí∞ ${utils.formatPrice(plan.price)} / ${plan.duration} –¥–Ω–µ–π\n`;
    plansText += `üìù ${plan.description}\n\n`;
    plansText += `‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n`;
    plan.features.forEach(feature => {
      plansText += `‚Ä¢ ${feature}\n`;
    });
    plansText += '\n';
  });

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üü¢ –ë–∞–∑–æ–≤—ã–π', 'buy_basic')],
    [Markup.button.callback('üü° –ü—Ä–µ–º–∏—É–º', 'buy_premium')],
    [Markup.button.callback('üî¥ –ü—Ä–æ—Ñ–∏', 'buy_pro')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(plansText, { 
    parse_mode: 'Markdown',
    ...keyboard 
  });
});

bot.action('my_keys', async (ctx) => {
  const chatId = ctx.chat.id;
  const userState = userStates.get(chatId);
  
  if (!userState?.userId) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const keys = await api.getUserKeys(userState.userId);
  
  if (keys.length === 0) {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ', 'plans')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
    ]);
    
    await ctx.editMessageText('üîë –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∫–ª—é—á–µ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:', keyboard);
    return;
  }

  let keysText = 'üîë –í–∞—à–∏ VPN –∫–ª—é—á–∏:\n\n';
  
  keys.forEach((key, index) => {
    keysText += `*–ö–ª—é—á ${index + 1}:*\n`;
    keysText += `üîë \`${key.key}\`\n`;
    keysText += `üìÖ –°–æ–∑–¥–∞–Ω: ${utils.formatDate(key.createdAt)}\n`;
    keysText += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${utils.formatDate(key.expiresAt)}\n`;
    keysText += `üìä –°—Ç–∞—Ç—É—Å: ${key.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
  });

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'my_keys')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(keysText, { 
    parse_mode: 'Markdown',
    ...keyboard 
  });
});

bot.action('stats', async (ctx) => {
  const chatId = ctx.chat.id;
  const userState = userStates.get(chatId);
  
  if (!userState?.userId) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const user = await api.getUser(ctx.from.id);
  const keys = await api.getUserKeys(userState.userId);
  
  const statsText = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user ? utils.formatDate(user.createdAt) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üîë –ö–ª—é—á–µ–π: ${keys.length}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${keys.filter(k => k.isActive).length}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${keys.filter(k => !k.isActive).length}

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ!
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ', 'plans')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(statsText, keyboard);
});

bot.action('payment', async (ctx) => {
  const paymentText = `
üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Visa, MasterCard)
‚Ä¢ üì± –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Bitcoin, Ethereum)
‚Ä¢ ‚≠ê Telegram Stars (—Å–∫–æ—Ä–æ)

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üü¢ –ë–∞–∑–æ–≤—ã–π', 'buy_basic')],
    [Markup.button.callback('üü° –ü—Ä–µ–º–∏—É–º', 'buy_premium')],
    [Markup.button.callback('üî¥ –ü—Ä–æ—Ñ–∏', 'buy_pro')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(paymentText, keyboard);
});

bot.action('support', async (ctx) => {
  const supportText = `
üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @vless_support
üåê –°–∞–π—Ç: ${BOT_CONFIG.website}
üìß Email: support@vless-vpn.org

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7
‚ö° –û—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç

–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN?
‚Ä¢ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º?
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'https://t.me/vless_support')],
    [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', BOT_CONFIG.website)],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(supportText, keyboard);
});

bot.action('about', async (ctx) => {
  const aboutText = `
‚ÑπÔ∏è –û –±–æ—Ç–µ

${BOT_CONFIG.name} v${BOT_CONFIG.version}

üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ VLESS
üîê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É
üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π VLESS Premium Team
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üåê –°–∞–π—Ç', BOT_CONFIG.website)],
    [Markup.button.url('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'https://t.me/vless_support')],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
  ]);

  await ctx.editMessageText(aboutText, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
bot.action(/^buy_(.+)$/, async (ctx) => {
  const planType = ctx.match[1];
  const plan = PLANS[planType];
  
  if (!plan) {
    await ctx.answerCbQuery('‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const chatId = ctx.chat.id;
  const userState = userStates.get(chatId);
  
  if (!userState?.userId) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const paymentText = `
üõí –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ "${plan.name}"

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.formatPrice(plan.price)}
üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.duration} –¥–Ω–µ–π

‚ú® –í–∫–ª—é—á–µ–Ω–æ:
${plan.features.map(feature => `‚Ä¢ ${feature}`).join('\n')}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', `pay_card_${planType}`)],
    [Markup.button.callback('üì± –°–ë–ü', `pay_sbp_${planType}`)],
    [Markup.button.callback('üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', `pay_crypto_${planType}`)],
    [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'plans')]
  ]);

  await ctx.editMessageText(paymentText, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
bot.action(/^pay_(.+)_(.+)$/, async (ctx) => {
  const paymentMethod = ctx.match[1];
  const planType = ctx.match[2];
  const plan = PLANS[planType];
  
  if (!plan) {
    await ctx.answerCbQuery('‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const chatId = ctx.chat.id;
  const userState = userStates.get(chatId);
  
  if (!userState?.userId) {
    await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
  const payment = await api.createPayment(userState.userId, planType, plan.price);
  
  if (!payment) {
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
    return;
  }

  let paymentText = '';
  let keyboard;

  switch (paymentMethod) {
    case 'card':
      paymentText = `
üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π

üí∞ –°—É–º–º–∞: ${utils.formatPrice(plan.price)}
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}

–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
      `;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', payment.paymentUrl)],
        [Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `check_payment_${payment.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'plans')]
      ]);
      break;
      
    case 'sbp':
      paymentText = `
üì± –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü

üí∞ –°—É–º–º–∞: ${utils.formatPrice(plan.price)}
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}

QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
      `;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üì± –ü–æ–∫–∞–∑–∞—Ç—å QR', `show_qr_${payment.id}`)],
        [Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `check_payment_${payment.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'plans')]
      ]);
      break;
      
    case 'crypto':
      paymentText = `
üí∞ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π

üí∞ –°—É–º–º–∞: ${utils.formatPrice(plan.price)}
üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}

–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:
      `;
      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å', `show_crypto_${payment.id}`)],
        [Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `check_payment_${payment.id}`)],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'plans')]
      ]);
      break;
  }

  await ctx.editMessageText(paymentText, keyboard);
});

bot.action('back_to_main', async (ctx) => {
  const welcomeText = `
üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
  `;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üõí –¢–∞—Ä–∏—Ñ—ã', 'plans')],
    [Markup.button.callback('üîë –ú–æ–∏ –∫–ª—é—á–∏', 'my_keys'), Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')],
    [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∞', 'payment'), Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
    [Markup.button.callback('‚ÑπÔ∏è –û –±–æ—Ç–µ', 'about')]
  ]);

  await ctx.editMessageText(welcomeText, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  const chatId = ctx.chat.id;
  const userState = userStates.get(chatId);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  if (!userState) {
    await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  switch (text.toLowerCase()) {
    case '–º–µ–Ω—é':
    case '–≥–ª–∞–≤–Ω–∞—è':
    case '–Ω–∞—á–∞—Ç—å':
      await ctx.reply('üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      break;
      
    case '–ø–æ–º–æ—â—å':
    case 'help':
      await ctx.reply('üÜò –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @vless_support');
      break;
      
    default:
      await ctx.reply('ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @vless_support');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log(`ü§ñ ${BOT_CONFIG.name} bot started successfully!`);
  console.log(`üìä Bot version: ${BOT_CONFIG.version}`);
  console.log(`üåê Website: ${BOT_CONFIG.website}`);
}).catch((error) => {
  console.error('Failed to start bot:', error);
});

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

export default bot;